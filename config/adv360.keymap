
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
        &kp ESC     &kp N1    &kp N2            &kp N3             &kp N4  &kp N5                          &tog 1                                                                             &mo 3  &kp N6    &kp N7     &kp N8   &kp N9    &kp N0       &kp EQUAL
        &kp TAB      &kp Q     &kp W             &kp E              &kp R   &kp T                           &none                                                                             &none   &kp Y     &kp U      &kp I    &kp O     &kp P        &kp BSLH
   &kp LEFT_ALT      &kp A     &kp S             &kp D              &kp F   &kp G                           &none      &mo 2           &mo 1                  &kp LGUI           &mo 1        &none   &kp H     &kp J      &kp K    &kp L  &kp SEMI         &kp SQT
      &kp LCTRL      &kp Z     &kp X             &kp C              &kp V   &kp B                                                    &kp DEL                  &kp HOME                                &kp N     &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp MINUS
 &kp LEFT_SHIFT  &kp GRAVE  &kp CAPS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET                    &mt LEFT_SHIFT SPACE  &kp ENTER  &mt LCTRL BSPC                  &kp INT5  &kp INT_HENKAN  &lt 2 ENTER          &kp LEFT  &kp RIGHT   &kp UP  &kp DOWN  &mt RSHFT BSPC
            >;
        };

        layer_keypad {
            bindings = <
     &kp ESC         &kp N1             &kp N2            &kp N3             &kp N4         &kp N5               &trans                                                                        &mo 3       &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp EQUAL
     &kp TAB  &kp AMPERSAND      &kp AMPERSAND     &kp LESS_THAN   &kp GREATER_THAN  &kp BACKSLASH                &none                                                                        &none  &kp INT_YEN   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp RGUI
 &kp INT_YEN      &kp COLON         &kp K_BACK       &kp KP_LPAR        &kp KP_RPAR       &kp PIPE                &none      &mo 2      &mo 0                  &kp KP_ASTERISK  &kp SLASH      &none    &kp POUND   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp RALT
   &kp UNDER  &kp SEMICOLON   &kp SINGLE_QUOTE    &kp LEFT_BRACE    &kp RIGHT_BRACE      &kp SLASH                                    &kp INS                      &kp KP_PLUS                              &none   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_EQUAL   &kp RCTRL
  &kp LSHIFT      &kp GRAVE  &kp DOUBLE_QUOTES  &kp LEFT_BRACKET  &kp RIGHT_BRACKET                           &kp SPACE  &kp ENTER  &kp LCTRL                     &kp KP_MINUS  &kp SPACE  &kp ENTER                &kp KP_N0    &kp KP_DOT      &kp COMMA     &kp KP_ENTER  &kp RSHIFT
            >;
        };

        layer_fn {
            bindings = <
 &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5            &tog 1                                                   &mo 3    &kp F6     &kp F7     &kp F8     &kp F9  &kp F10  &kp F11
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none    &trans     &trans   &kp HOME    &kp END   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &mo 1   &mo 0                  &trans  &trans   &none  &kp LEFT  &kp RIGHT     &kp UP   &kp DOWN   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                     &none      &none  &kp PG_UP  &kp PG_DN   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans               &trans     &trans     &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_Layer__4 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
